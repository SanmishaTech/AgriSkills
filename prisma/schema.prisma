// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(uuid())
  email                    String              @unique
  password                 String
  name                     String?
  role                     String              @default("user")
  profilePhoto             String?
  emailVerified            DateTime?
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  quizAttempts             QuizAttempt[]       // User's quiz attempts
  certificates             Certificate[]       // User's earned certificates
  courseCompletions        CourseCompletion[]  // User's completed courses
  questionSelections       TopicQuestionSelection[] // User's topic question selections
}

model Topic {
  id          String      @id @default(uuid())
  title       String
  description String?
  thumbnail   String?     // URL or path to thumbnail image
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  subtopics   Subtopic[]
  demo        TopicDemo?
  questions   TopicQuestion[] // Topic questions for user selection
}

model Subtopic {
  id          String     @id @default(uuid())
  title       String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  topicId     String
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  courses     Course[]
}

model Course {
  id          String     @id @default(uuid())
  title       String
  description String?
  thumbnail   String?    // URL or path to course thumbnail
  duration    Int?       // Total duration in minutes
  level       String?    // Beginner, Intermediate, Advanced
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  subtopicId  String
  subtopic    Subtopic   @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  completions CourseCompletion[] // Track users who completed this course
}

model Chapter {
  id          String      @id @default(uuid())
  title       String
  description String?
  content     String      // Rich text content for the chapter
  youtubeUrl  String?     // Optional YouTube video URL
  orderIndex  Int         @default(0) // To maintain chapter order within a course
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  demoVideos  DemoVideo[]
  sections    Section[]
  quiz        Quiz?       // Each chapter can have one quiz
}

model DemoVideo {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoUrl    String
  duration    Int?     // Duration in seconds
  thumbnailUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Section {
  id          String   @id @default(uuid())
  title       String
  content     String   // Rich text content
  orderIndex  Int      // To maintain section order
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model TopicDemo {
  id          String   @id @default(uuid())
  topicId     String   @unique
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  demoUrls    String[] // Array of YouTube URLs
  content     String   // Rich text content describing the topic
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Topic Questions for user selection
model TopicQuestion {
  id          String               @id @default(uuid())
  topicId     String
  topic       Topic                @relation(fields: [topicId], references: [id], onDelete: Cascade)
  question    String               // Question text
  isActive    Boolean              @default(true)
  orderIndex  Int                  @default(0) // Order of questions
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  selections  TopicQuestionSelection[] // User selections
}

// User selections of topic questions
model TopicQuestionSelection {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId  String
  question    TopicQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topicId     String         // Denormalized for easier querying
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([userId, questionId]) // A user can select a question only once per topic
  @@index([userId])
  @@index([topicId])
}

model YouTubeShort {
  id           String   @id @default(uuid())
  title        String
  description  String?
  url          String   @unique // YouTube shorts URL
  videoId      String   // Extracted YouTube video ID
  thumbnailUrl String   // YouTube thumbnail URL
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Quiz System Models
model Quiz {
  id          String        @id @default(uuid())
  title       String
  description String?
  isActive    Boolean       @default(true)
  passingScore Int          @default(50) // Minimum percentage to pass (50%)
  timeLimit   Int?          // Time limit in minutes (optional)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  chapterId   String        @unique
  chapter     Chapter       @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions   Question[]    // Quiz questions
  attempts    QuizAttempt[] // User attempts
}

model Question {
  id         String         @id @default(uuid())
  text       String         // Question text
  type       String         @default("multiple_choice") // multiple_choice, true_false, fill_in_blank
  points     Int            @default(1) // Points for correct answer
  orderIndex Int            @default(0) // Order of questions
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  quizId     String
  quiz       Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers    Answer[]       // Possible answers
  responses  QuizResponse[] // Quiz responses for this question
}

model Answer {
  id         String   @id @default(uuid())
  text       String   // Answer text
  isCorrect  Boolean  @default(false) // Whether this answer is correct
  orderIndex Int      @default(0) // Order of answers
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id           String                @id @default(uuid())
  score        Float                 // Score achieved (percentage)
  totalPoints  Int                   // Total points earned
  maxPoints    Int                   // Maximum possible points
  isPassed     Boolean               // Whether user passed (score >= passingScore)
  timeSpent    Int?                  // Time spent in minutes
  startedAt    DateTime              @default(now())
  completedAt  DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  userId       String
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId       String
  quiz         Quiz                  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  responses    QuizResponse[]        // User's answers
  certificate  Certificate?          // Generated certificate if passed
  courseCompletion CourseCompletion? // Course completion if this attempt passed
}

model QuizResponse {
  id            String      @id @default(uuid())
  selectedText  String?     // For text answers or selected choice text
  isCorrect     Boolean     // Whether the response was correct
  pointsEarned  Int         // Points earned for this response
  createdAt     DateTime    @default(now())
  attemptId     String
  attempt       QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId    String
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId      String?     // Selected answer ID (for multiple choice)
}

model Certificate {
  id              String      @id @default(uuid())
  certificateUrl  String?     // URL to the generated PDF certificate
  certificateData String?     // Base64 or JSON data of certificate
  issuedAt        DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  attemptId       String      @unique
  attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

// Track course completions
model CourseCompletion {
  id              String       @id @default(cuid())
  userId          String
  courseId        String
  completedAt     DateTime     @default(now())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizAttemptId   String?      @unique // Reference to the quiz attempt that completed the course
  quizAttempt     QuizAttempt? @relation(fields: [quizAttemptId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId]) // A user can complete a course only once
  @@index([userId])
  @@index([courseId])
  @@index([completedAt])
}
